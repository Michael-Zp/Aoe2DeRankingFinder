@{
    ViewData["Title"] = "Search";
}

@model IEnumerable<WebApp.Models.Player>
&nbsp;&nbsp

<script>

    var delayedSearchCount = 0;
    var delayedSearchCurrentId = 0;
    var delayedSearchRunning = {};

    function delayedSearch() {
        if (delayedSearchCount > 0) {
            delayedSearchCount = 0;
            delayedSearchRunning[delayedSearchCurrentId] = false;
            document.getElementById("btnDelayedSearch").innerText = "Search in 30 seconds";
        }
        else {
            delayedSearchCount = 31;

            delayedSearchCurrentId++;
            delayedSearchRunning[delayedSearchCurrentId] = true;

            delayedSearchStep(delayedSearchCurrentId);

        }
    }

    function delayedSearchStep(id) {

        if (delayedSearchRunning[id] == false) {
            delete delayedSearchRunning[id];
            return;
        }

        delayedSearchCount--;


        document.getElementById("btnDelayedSearch").innerText = "Abort (" + delayedSearchCount + "s)";

        if (delayedSearchCount <= 0) {
            search();
            return;
        }

        setTimeout(delayedSearchStep, 1000, id)
    }

    function search() {
        document.forms["searchForm"].submit();
    }
</script>


<p>Either just type the name and search or use the delayed search to press the button before the game starts and get the results after the game is loaded.</p>

&nbsp



@using (Html.BeginForm("Index", "Search", FormMethod.Get, new { name = "searchForm", id = "searchForm" }))
{
    <p style="display:inline">Steam name:</p>
    <input type="text" name="name" value="@ViewData["Name"]" />
    <button type="button" onclick="search()">Search</button>
    <button type="button" id="btnDelayedSearch" onclick="delayedSearch()">Search in 30 seconds</button>
}

<h2>@ViewData["Error"]</h2>

<table class="table table-bordered table-responsive table-hover">
    <tr>
        <th>Name</th>
        <th>Unranked Rating</th>
        <th>DM Rating</th>
        <th>Team DM Rating</th>
        <th>RM Rating</th>
        <th>Team RM Rating</th>
    </tr>
    @foreach (var d in Model)
    {
        <tr>
            <td>@d.Name</td>
            <td>@d.UnrankedRating</td>
            <td>@d.DMRating</td>
            <td>@d.TeamDMRating</td>
            <td>@d.RMRating</td>
            <td>@d.TeamRMRating</td>
        </tr>
    }
</table>

&nbsp;&nbsp

<p>* Players who bought the game not on Steam are not supported by Aoe2.net .</p>